import snakebids
from snakebids import bids, generate_inputs, get_wildcard_constraints

configfile: '/config/snakebids.yml'

# Get input wildcards
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
)

# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),

# ----
wildcard_constraints:
    desc="[a-zA-Z0-9]+",
    space="[a-zA-Z0-9]+",
    hemi="[a-zA-Z0-9]+",
    surfname="[a-zA-Z0-9]+",
    modality="[a-zA-Z0-9]+",
    density="[a-zA-Z0-9]+",
    atlas="[a-zA-Z0-9]+",
    autotop="[a-zA-Z0-9]+",
    template="[a-zA-Z0-9]+",

root = os.path.expandvars(config["root"])
work = os.path.expandvars(config["workdir"])
resolution = float(config['res'])

include: 'rules/preproc.smk'
# include: 'rules/train_model.smk'

rule all:
    input:
        patches = inputs["t1w"].expand(
            bids(
                root=work,
                datatype="patches",
                desc="samples_31",
                suffix=".dat",
                acq="gad",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"} 
            )
        )
       
 
